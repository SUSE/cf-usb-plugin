package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hpcloud/cf-plugin-usb/lib/models"
)

// UpdateInstanceReader is a Reader for the UpdateInstance structure.
type UpdateInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UpdateInstanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateInstanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateInstanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateInstanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInstanceOK creates a UpdateInstanceOK with default headers values
func NewUpdateInstanceOK() *UpdateInstanceOK {
	return &UpdateInstanceOK{}
}

/*UpdateInstanceOK handles this case with default header values.

Sucessfull response
*/
type UpdateInstanceOK struct {
	Payload *models.Instance
}

func (o *UpdateInstanceOK) Error() string {
	return fmt.Sprintf("[PUT /instances/{instance_id}][%d] updateInstanceOK  %+v", 200, o.Payload)
}

func (o *UpdateInstanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Instance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstanceNotFound creates a UpdateInstanceNotFound with default headers values
func NewUpdateInstanceNotFound() *UpdateInstanceNotFound {
	return &UpdateInstanceNotFound{}
}

/*UpdateInstanceNotFound handles this case with default header values.

Not Found
*/
type UpdateInstanceNotFound struct {
}

func (o *UpdateInstanceNotFound) Error() string {
	return fmt.Sprintf("[PUT /instances/{instance_id}][%d] updateInstanceNotFound ", 404)
}

func (o *UpdateInstanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceConflict creates a UpdateInstanceConflict with default headers values
func NewUpdateInstanceConflict() *UpdateInstanceConflict {
	return &UpdateInstanceConflict{}
}

/*UpdateInstanceConflict handles this case with default header values.

Conflict
*/
type UpdateInstanceConflict struct {
}

func (o *UpdateInstanceConflict) Error() string {
	return fmt.Sprintf("[PUT /instances/{instance_id}][%d] updateInstanceConflict ", 409)
}

func (o *UpdateInstanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceInternalServerError creates a UpdateInstanceInternalServerError with default headers values
func NewUpdateInstanceInternalServerError() *UpdateInstanceInternalServerError {
	return &UpdateInstanceInternalServerError{}
}

/*UpdateInstanceInternalServerError handles this case with default header values.

Unexpected error
*/
type UpdateInstanceInternalServerError struct {
	Payload string
}

func (o *UpdateInstanceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances/{instance_id}][%d] updateInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstanceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
