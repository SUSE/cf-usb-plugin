package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDriverEndpoint Gets details for a specific driver endpoint

*/
func (a *Client) GetDriverEndpoint(params *GetDriverEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverEndpoint",
		Method:             "GET",
		PathPattern:        "/driver_endpoints/{driver_endpoint_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriverEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverEndpointOK), nil
}

/*
GetDriverEndpoints Lists all registered driver endpoints
*/
func (a *Client) GetDriverEndpoints(params *GetDriverEndpointsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverEndpoints",
		Method:             "GET",
		PathPattern:        "/driver_endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriverEndpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverEndpointsOK), nil
}

/*
GetInfo Gets information about the USB.

*/
func (a *Client) GetInfo(params *GetInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfoOK), nil
}

/*
PingDriverEndpoint Pings a driver endpoint to determine basic health status

*/
func (a *Client) PingDriverEndpoint(params *PingDriverEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*PingDriverEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingDriverEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pingDriverEndpoint",
		Method:             "GET",
		PathPattern:        "/driver_endpoint/{driver_endpoint_id}/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingDriverEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PingDriverEndpointOK), nil
}

/*
RegisterDriverEndpoint Registers a driver endpoint with the USB
*/
func (a *Client) RegisterDriverEndpoint(params *RegisterDriverEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterDriverEndpointCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterDriverEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerDriverEndpoint",
		Method:             "POST",
		PathPattern:        "/driver_endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterDriverEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterDriverEndpointCreated), nil
}

/*
UnregisterDriverInstance Unregisters a driver instance
*/
func (a *Client) UnregisterDriverInstance(params *UnregisterDriverInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*UnregisterDriverInstanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnregisterDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unregisterDriverInstance",
		Method:             "DELETE",
		PathPattern:        "/driver_endpoints/{driver_endpoint_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnregisterDriverInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnregisterDriverInstanceNoContent), nil
}

/*
UpdateCatalog Updates Cloud Foundry's service catalog.

*/
func (a *Client) UpdateCatalog(params *UpdateCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCatalog",
		Method:             "POST",
		PathPattern:        "/update_catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCatalogOK), nil
}

/*
UpdateDriverEndpoint Update a driver endpoint

*/
func (a *Client) UpdateDriverEndpoint(params *UpdateDriverEndpointParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDriverEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDriverEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDriverEndpoint",
		Method:             "PUT",
		PathPattern:        "/driver_endpoints/{driver_endpoint_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDriverEndpointReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDriverEndpointOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
