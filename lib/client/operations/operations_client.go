package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDial Create a dial for
*/
func (a *Client) CreateDial(params *CreateDialParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDialCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDial",
		Method:             "POST",
		PathPattern:        "/dials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDialCreated), nil
}

/*
CreateInstance Create an instance
*/
func (a *Client) CreateInstance(params *CreateInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateInstanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstance",
		Method:             "POST",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceCreated), nil
}

/*
DeleteDial Delets the `dial` with the **dial_id**
*/
func (a *Client) DeleteDial(params *DeleteDialParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDial",
		Method:             "DELETE",
		PathPattern:        "/dials/{dial_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDialNoContent), nil
}

/*
DeleteInstance Delete an instance
*/
func (a *Client) DeleteInstance(params *DeleteInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInstanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstance",
		Method:             "DELETE",
		PathPattern:        "/instances/{instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstanceNoContent), nil
}

/*
GetAllDials Gets `dials`
*/
func (a *Client) GetAllDials(params *GetAllDialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllDialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllDials",
		Method:             "GET",
		PathPattern:        "/dials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDialsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllDialsOK), nil
}

/*
GetDial Gets the `dial` with the **dial_id**
*/
func (a *Client) GetDial(params *GetDialParams, authInfo runtime.ClientAuthInfoWriter) (*GetDialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDial",
		Method:             "GET",
		PathPattern:        "/dials/{dial_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDialOK), nil
}

/*
GetInfo Gets information about the USB.

*/
func (a *Client) GetInfo(params *GetInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfoOK), nil
}

/*
GetInstance Gets instance configurations

*/
func (a *Client) GetInstance(params *GetInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstance",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstanceOK), nil
}

/*
GetInstances Gets available instances
*/
func (a *Client) GetInstances(params *GetInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstances",
		Method:             "GET",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesOK), nil
}

/*
GetService Gets the `service` with the id **serviceID**
*/
func (a *Client) GetService(params *GetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getService",
		Method:             "GET",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceOK), nil
}

/*
GetServiceByInstanceID Gets the existing `service`

*/
func (a *Client) GetServiceByInstanceID(params *GetServiceByInstanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceByInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceByInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceByInstanceId",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceByInstanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceByInstanceIDOK), nil
}

/*
GetServicePlan Gets the `plan` with the **planID**
*/
func (a *Client) GetServicePlan(params *GetServicePlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServicePlan",
		Method:             "GET",
		PathPattern:        "/plans/{plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicePlanOK), nil
}

/*
GetServicePlans Gets `plans`
*/
func (a *Client) GetServicePlans(params *GetServicePlansParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicePlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServicePlans",
		Method:             "GET",
		PathPattern:        "/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicePlansReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicePlansOK), nil
}

/*
PingInstance Pings the instance

*/
func (a *Client) PingInstance(params *PingInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*PingInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pingInstance",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PingInstanceOK), nil
}

/*
UpdateCatalog Updates the broker catalog

*/
func (a *Client) UpdateCatalog(params *UpdateCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCatalog",
		Method:             "POST",
		PathPattern:        "/update_catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCatalogOK), nil
}

/*
UpdateDial Updates the dial with the id **dial_id**
*/
func (a *Client) UpdateDial(params *UpdateDialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDial",
		Method:             "PUT",
		PathPattern:        "/dials/{dial_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDialOK), nil
}

/*
UpdateInstance Update an instance

*/
func (a *Client) UpdateInstance(params *UpdateInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstance",
		Method:             "PUT",
		PathPattern:        "/instances/{instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInstanceOK), nil
}

/*
UpdateService Updates the `service` with the id **serviceID**
*/
func (a *Client) UpdateService(params *UpdateServiceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateService",
		Method:             "PUT",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateServiceOK), nil
}

/*
UpdateServicePlan Updates the plan with the id **planID** for the service id **serviceID**
*/
func (a *Client) UpdateServicePlan(params *UpdateServicePlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServicePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServicePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServicePlan",
		Method:             "PUT",
		PathPattern:        "/plans/{plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServicePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateServicePlanOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
