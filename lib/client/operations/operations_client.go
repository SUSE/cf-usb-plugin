package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDial Create a dial for
*/
func (a *Client) CreateDial(params *CreateDialParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDialCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDial",
		Method:             "POST",
		PathPattern:        "/dials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDialCreated), nil
}

/*
CreateDriver Create a new driver

*/
func (a *Client) CreateDriver(params *CreateDriverParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDriverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDriver",
		Method:             "POST",
		PathPattern:        "/drivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDriverCreated), nil
}

/*
CreateDriverInstance Create a driver instance
*/
func (a *Client) CreateDriverInstance(params *CreateDriverInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDriverInstanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDriverInstance",
		Method:             "POST",
		PathPattern:        "/driver_instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDriverInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDriverInstanceCreated), nil
}

/*
DeleteDial Delets the `dial` with the **dial_id**
*/
func (a *Client) DeleteDial(params *DeleteDialParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDial",
		Method:             "DELETE",
		PathPattern:        "/dials/{dial_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDialNoContent), nil
}

/*
DeleteDriver Update driver
*/
func (a *Client) DeleteDriver(params *DeleteDriverParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDriverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDriver",
		Method:             "DELETE",
		PathPattern:        "/drivers/{driver_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverNoContent), nil
}

/*
DeleteDriverInstance Delete a driver instance
*/
func (a *Client) DeleteDriverInstance(params *DeleteDriverInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDriverInstanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDriverInstance",
		Method:             "DELETE",
		PathPattern:        "/driver_instances/{driver_instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDriverInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDriverInstanceNoContent), nil
}

/*
GetAllDials Gets `dials`
*/
func (a *Client) GetAllDials(params *GetAllDialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllDialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllDials",
		Method:             "GET",
		PathPattern:        "/dials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDialsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllDialsOK), nil
}

/*
GetDial Gets the `dial` with the **dial_id**
*/
func (a *Client) GetDial(params *GetDialParams, authInfo runtime.ClientAuthInfoWriter) (*GetDialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDial",
		Method:             "GET",
		PathPattern:        "/dials/{dial_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDialOK), nil
}

/*
GetDialSchema Get dial schema
*/
func (a *Client) GetDialSchema(params *GetDialSchemaParams, authInfo runtime.ClientAuthInfoWriter) (*GetDialSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDialSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDialSchema",
		Method:             "GET",
		PathPattern:        "/drivers/{driver_id}/dial_schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDialSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDialSchemaOK), nil
}

/*
GetDriver Get driver
*/
func (a *Client) GetDriver(params *GetDriverParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriver",
		Method:             "GET",
		PathPattern:        "/drivers/{driver_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverOK), nil
}

/*
GetDriverInstance Gets driver configurations

*/
func (a *Client) GetDriverInstance(params *GetDriverInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverInstance",
		Method:             "GET",
		PathPattern:        "/driver_instances/{driver_instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriverInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverInstanceOK), nil
}

/*
GetDriverInstances Gets driver instances for a driver

*/
func (a *Client) GetDriverInstances(params *GetDriverInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverInstances",
		Method:             "GET",
		PathPattern:        "/driver_instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriverInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverInstancesOK), nil
}

/*
GetDriverSchema Get driver config schema
*/
func (a *Client) GetDriverSchema(params *GetDriverSchemaParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriverSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriverSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDriverSchema",
		Method:             "GET",
		PathPattern:        "/drivers/{driver_id}/config_schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriverSchemaReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriverSchemaOK), nil
}

/*
GetDrivers Gets information about the available `drivers`

*/
func (a *Client) GetDrivers(params *GetDriversParams, authInfo runtime.ClientAuthInfoWriter) (*GetDriversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDriversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDrivers",
		Method:             "GET",
		PathPattern:        "/drivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDriversReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDriversOK), nil
}

/*
GetInfo Gets information about the USB.

*/
func (a *Client) GetInfo(params *GetInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfoOK), nil
}

/*
GetService Gets the `service` with the id **serviceID**
*/
func (a *Client) GetService(params *GetServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getService",
		Method:             "GET",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceOK), nil
}

/*
GetServiceByInstanceID Gets the existing `service`

*/
func (a *Client) GetServiceByInstanceID(params *GetServiceByInstanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceByInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceByInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceByInstanceId",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceByInstanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceByInstanceIDOK), nil
}

/*
GetServicePlan Gets the `plan` with the **planID**
*/
func (a *Client) GetServicePlan(params *GetServicePlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServicePlan",
		Method:             "GET",
		PathPattern:        "/plans/{plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicePlanOK), nil
}

/*
GetServicePlans Gets `plans`
*/
func (a *Client) GetServicePlans(params *GetServicePlansParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicePlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServicePlans",
		Method:             "GET",
		PathPattern:        "/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicePlansReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicePlansOK), nil
}

/*
PingDriverInstance Pings the driver

*/
func (a *Client) PingDriverInstance(params *PingDriverInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*PingDriverInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pingDriverInstance",
		Method:             "GET",
		PathPattern:        "/driver_instances/{driver_instance_id}/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PingDriverInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PingDriverInstanceOK), nil
}

/*
UpdateCatalog Updates the broker catalog

*/
func (a *Client) UpdateCatalog(params *UpdateCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCatalog",
		Method:             "POST",
		PathPattern:        "/update_catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCatalogOK), nil
}

/*
UpdateDial Updates the dial with the id **dial_id**
*/
func (a *Client) UpdateDial(params *UpdateDialParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDial",
		Method:             "PUT",
		PathPattern:        "/dials/{dial_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDialReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDialOK), nil
}

/*
UpdateDriver Update driver
*/
func (a *Client) UpdateDriver(params *UpdateDriverParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDriver",
		Method:             "PUT",
		PathPattern:        "/drivers/{driver_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDriverOK), nil
}

/*
UpdateDriverInstance Update a driver instance

*/
func (a *Client) UpdateDriverInstance(params *UpdateDriverInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDriverInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDriverInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDriverInstance",
		Method:             "PUT",
		PathPattern:        "/driver_instances/{driver_instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDriverInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDriverInstanceOK), nil
}

/*
UpdateService Updates the `service` with the id **serviceID**
*/
func (a *Client) UpdateService(params *UpdateServiceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateService",
		Method:             "PUT",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateServiceOK), nil
}

/*
UpdateServicePlan Updates the plan with the id **planID** for the service id **serviceID**
*/
func (a *Client) UpdateServicePlan(params *UpdateServicePlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServicePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServicePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServicePlan",
		Method:             "PUT",
		PathPattern:        "/plans/{plan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServicePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateServicePlanOK), nil
}

/*
UploadDriver Upload driver bits
*/
func (a *Client) UploadDriver(params *UploadDriverParams, authInfo runtime.ClientAuthInfoWriter) (*UploadDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadDriver",
		Method:             "PUT",
		PathPattern:        "/drivers/{driver_id}/bits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadDriverReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadDriverOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
