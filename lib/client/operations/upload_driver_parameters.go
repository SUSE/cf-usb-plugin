package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"os"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewUploadDriverParams creates a new UploadDriverParams object
// with the default values initialized.
func NewUploadDriverParams() *UploadDriverParams {
	var ()
	return &UploadDriverParams{}
}

/*UploadDriverParams contains all the parameters to send to the API endpoint
for the upload driver operation typically these are written to a http.Request
*/
type UploadDriverParams struct {

	/*DriverID
	  Driver ID

	*/
	DriverID string
	/*File
	  Driver executable

	*/
	File os.File
	/*Sha
	  file sha1 base64 encoded

	*/
	Sha string
}

// WithDriverID adds the driverId to the upload driver params
func (o *UploadDriverParams) WithDriverID(driverId string) *UploadDriverParams {
	o.DriverID = driverId
	return o
}

// WithFile adds the file to the upload driver params
func (o *UploadDriverParams) WithFile(file os.File) *UploadDriverParams {
	o.File = file
	return o
}

// WithSha adds the sha to the upload driver params
func (o *UploadDriverParams) WithSha(sha string) *UploadDriverParams {
	o.Sha = sha
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UploadDriverParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// path param driver_id
	if err := r.SetPathParam("driver_id", o.DriverID); err != nil {
		return err
	}

	// form file param file
	if err := r.SetFileParam("file", &o.File); err != nil {
		return err
	}

	// form param sha
	frSha := o.Sha
	fSha := frSha
	if fSha != "" {
		if err := r.SetFormParam("sha", fSha); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
