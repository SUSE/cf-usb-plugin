package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hpcloud/cf-plugin-usb/lib/models"
)

// UpdateDriverReader is a Reader for the UpdateDriver structure.
type UpdateDriverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UpdateDriverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDriverOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateDriverNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateDriverConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateDriverInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDriverOK creates a UpdateDriverOK with default headers values
func NewUpdateDriverOK() *UpdateDriverOK {
	return &UpdateDriverOK{}
}

/*UpdateDriverOK handles this case with default header values.

Driver updated
*/
type UpdateDriverOK struct {
	Payload *models.Driver
}

func (o *UpdateDriverOK) Error() string {
	return fmt.Sprintf("[PUT /drivers/{driver_id}][%d] updateDriverOK  %+v", 200, o.Payload)
}

func (o *UpdateDriverOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Driver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverNotFound creates a UpdateDriverNotFound with default headers values
func NewUpdateDriverNotFound() *UpdateDriverNotFound {
	return &UpdateDriverNotFound{}
}

/*UpdateDriverNotFound handles this case with default header values.

Not Found
*/
type UpdateDriverNotFound struct {
}

func (o *UpdateDriverNotFound) Error() string {
	return fmt.Sprintf("[PUT /drivers/{driver_id}][%d] updateDriverNotFound ", 404)
}

func (o *UpdateDriverNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDriverConflict creates a UpdateDriverConflict with default headers values
func NewUpdateDriverConflict() *UpdateDriverConflict {
	return &UpdateDriverConflict{}
}

/*UpdateDriverConflict handles this case with default header values.

A driver with the same type already exists
*/
type UpdateDriverConflict struct {
}

func (o *UpdateDriverConflict) Error() string {
	return fmt.Sprintf("[PUT /drivers/{driver_id}][%d] updateDriverConflict ", 409)
}

func (o *UpdateDriverConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDriverInternalServerError creates a UpdateDriverInternalServerError with default headers values
func NewUpdateDriverInternalServerError() *UpdateDriverInternalServerError {
	return &UpdateDriverInternalServerError{}
}

/*UpdateDriverInternalServerError handles this case with default header values.

Unexpected error
*/
type UpdateDriverInternalServerError struct {
	Payload string
}

func (o *UpdateDriverInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /drivers/{driver_id}][%d] updateDriverInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDriverInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
