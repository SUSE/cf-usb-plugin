package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/hpcloud/cf-plugin-usb/lib/models"
)

// UpdateDriverInstanceReader is a Reader for the UpdateDriverInstance structure.
type UpdateDriverInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UpdateDriverInstanceReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDriverInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateDriverInstanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateDriverInstanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateDriverInstanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDriverInstanceOK creates a UpdateDriverInstanceOK with default headers values
func NewUpdateDriverInstanceOK() *UpdateDriverInstanceOK {
	return &UpdateDriverInstanceOK{}
}

/*UpdateDriverInstanceOK handles this case with default header values.

Sucessfull response
*/
type UpdateDriverInstanceOK struct {
	Payload *models.DriverInstance
}

func (o *UpdateDriverInstanceOK) Error() string {
	return fmt.Sprintf("[PUT /driver_instances/{driver_instance_id}][%d] updateDriverInstanceOK  %+v", 200, o.Payload)
}

func (o *UpdateDriverInstanceOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DriverInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverInstanceNotFound creates a UpdateDriverInstanceNotFound with default headers values
func NewUpdateDriverInstanceNotFound() *UpdateDriverInstanceNotFound {
	return &UpdateDriverInstanceNotFound{}
}

/*UpdateDriverInstanceNotFound handles this case with default header values.

Not Found
*/
type UpdateDriverInstanceNotFound struct {
}

func (o *UpdateDriverInstanceNotFound) Error() string {
	return fmt.Sprintf("[PUT /driver_instances/{driver_instance_id}][%d] updateDriverInstanceNotFound ", 404)
}

func (o *UpdateDriverInstanceNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDriverInstanceConflict creates a UpdateDriverInstanceConflict with default headers values
func NewUpdateDriverInstanceConflict() *UpdateDriverInstanceConflict {
	return &UpdateDriverInstanceConflict{}
}

/*UpdateDriverInstanceConflict handles this case with default header values.

Conflict
*/
type UpdateDriverInstanceConflict struct {
}

func (o *UpdateDriverInstanceConflict) Error() string {
	return fmt.Sprintf("[PUT /driver_instances/{driver_instance_id}][%d] updateDriverInstanceConflict ", 409)
}

func (o *UpdateDriverInstanceConflict) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDriverInstanceInternalServerError creates a UpdateDriverInstanceInternalServerError with default headers values
func NewUpdateDriverInstanceInternalServerError() *UpdateDriverInstanceInternalServerError {
	return &UpdateDriverInstanceInternalServerError{}
}

/*UpdateDriverInstanceInternalServerError handles this case with default header values.

Unexpected error
*/
type UpdateDriverInstanceInternalServerError struct {
	Payload string
}

func (o *UpdateDriverInstanceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /driver_instances/{driver_instance_id}][%d] updateDriverInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDriverInstanceInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
