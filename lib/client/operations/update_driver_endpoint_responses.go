package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hpcloud/cf-plugin-usb/lib/models"
)

// UpdateDriverEndpointReader is a Reader for the UpdateDriverEndpoint structure.
type UpdateDriverEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UpdateDriverEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDriverEndpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateDriverEndpointNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateDriverEndpointConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateDriverEndpointInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDriverEndpointOK creates a UpdateDriverEndpointOK with default headers values
func NewUpdateDriverEndpointOK() *UpdateDriverEndpointOK {
	return &UpdateDriverEndpointOK{}
}

/*UpdateDriverEndpointOK handles this case with default header values.

Sucessful response
*/
type UpdateDriverEndpointOK struct {
	Payload *models.DriverEndpoint
}

func (o *UpdateDriverEndpointOK) Error() string {
	return fmt.Sprintf("[PUT /driver_endpoints/{driver_endpoint_id}][%d] updateDriverEndpointOK  %+v", 200, o.Payload)
}

func (o *UpdateDriverEndpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DriverEndpoint)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverEndpointNotFound creates a UpdateDriverEndpointNotFound with default headers values
func NewUpdateDriverEndpointNotFound() *UpdateDriverEndpointNotFound {
	return &UpdateDriverEndpointNotFound{}
}

/*UpdateDriverEndpointNotFound handles this case with default header values.

Not Found
*/
type UpdateDriverEndpointNotFound struct {
}

func (o *UpdateDriverEndpointNotFound) Error() string {
	return fmt.Sprintf("[PUT /driver_endpoints/{driver_endpoint_id}][%d] updateDriverEndpointNotFound ", 404)
}

func (o *UpdateDriverEndpointNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDriverEndpointConflict creates a UpdateDriverEndpointConflict with default headers values
func NewUpdateDriverEndpointConflict() *UpdateDriverEndpointConflict {
	return &UpdateDriverEndpointConflict{}
}

/*UpdateDriverEndpointConflict handles this case with default header values.

Conflict
*/
type UpdateDriverEndpointConflict struct {
	Payload string
}

func (o *UpdateDriverEndpointConflict) Error() string {
	return fmt.Sprintf("[PUT /driver_endpoints/{driver_endpoint_id}][%d] updateDriverEndpointConflict  %+v", 409, o.Payload)
}

func (o *UpdateDriverEndpointConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverEndpointInternalServerError creates a UpdateDriverEndpointInternalServerError with default headers values
func NewUpdateDriverEndpointInternalServerError() *UpdateDriverEndpointInternalServerError {
	return &UpdateDriverEndpointInternalServerError{}
}

/*UpdateDriverEndpointInternalServerError handles this case with default header values.

Unexpected error
*/
type UpdateDriverEndpointInternalServerError struct {
	Payload string
}

func (o *UpdateDriverEndpointInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /driver_endpoints/{driver_endpoint_id}][%d] updateDriverEndpointInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDriverEndpointInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
