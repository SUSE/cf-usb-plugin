package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"
)

type UpdateCatalogReader struct {
	formats strfmt.Registry
}

func (o *UpdateCatalogReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCatalogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewUpdateCatalogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCatalogOK creates a UpdateCatalogOK with default headers values
func NewUpdateCatalogOK() *UpdateCatalogOK {
	return &UpdateCatalogOK{}
}

/*UpdateCatalogOK

Successful response
*/
type UpdateCatalogOK struct {
}

func (o *UpdateCatalogOK) Error() string {
	return fmt.Sprintf("[POST /update_catalog][%d] updateCatalogOK ", 200)
}

func (o *UpdateCatalogOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCatalogInternalServerError creates a UpdateCatalogInternalServerError with default headers values
func NewUpdateCatalogInternalServerError() *UpdateCatalogInternalServerError {
	return &UpdateCatalogInternalServerError{}
}

/*UpdateCatalogInternalServerError

Unexpected error
*/
type UpdateCatalogInternalServerError struct {
	Payload string
}

func (o *UpdateCatalogInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update_catalog][%d] updateCatalogInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCatalogInternalServerError) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
