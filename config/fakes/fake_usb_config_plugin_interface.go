// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/SUSE/cf-usb-plugin/config"
)

type FakeUsbConfigPluginInterface struct {
	GetTargetStub        func() (string, error)
	getTargetMutex       sync.RWMutex
	getTargetArgsForCall []struct{}
	getTargetReturns     struct {
		result1 string
		result2 error
	}
	SetTargetStub        func(string) error
	setTargetMutex       sync.RWMutex
	setTargetArgsForCall []struct {
		arg1 string
	}
	setTargetReturns struct {
		result1 error
	}
	GetUsbConfigFileStub        func() (string, error)
	getUsbConfigFileMutex       sync.RWMutex
	getUsbConfigFileArgsForCall []struct{}
	getUsbConfigFileReturns     struct {
		result1 string
		result2 error
	}
}

func (fake *FakeUsbConfigPluginInterface) GetTarget() (string, error) {
	fake.getTargetMutex.Lock()
	fake.getTargetArgsForCall = append(fake.getTargetArgsForCall, struct{}{})
	fake.getTargetMutex.Unlock()
	if fake.GetTargetStub != nil {
		return fake.GetTargetStub()
	} else {
		return fake.getTargetReturns.result1, fake.getTargetReturns.result2
	}
}

func (fake *FakeUsbConfigPluginInterface) GetTargetCallCount() int {
	fake.getTargetMutex.RLock()
	defer fake.getTargetMutex.RUnlock()
	return len(fake.getTargetArgsForCall)
}

func (fake *FakeUsbConfigPluginInterface) GetTargetReturns(result1 string, result2 error) {
	fake.GetTargetStub = nil
	fake.getTargetReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUsbConfigPluginInterface) SetTarget(arg1 string) error {
	fake.setTargetMutex.Lock()
	fake.setTargetArgsForCall = append(fake.setTargetArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setTargetMutex.Unlock()
	if fake.SetTargetStub != nil {
		return fake.SetTargetStub(arg1)
	} else {
		return fake.setTargetReturns.result1
	}
}

func (fake *FakeUsbConfigPluginInterface) SetTargetCallCount() int {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return len(fake.setTargetArgsForCall)
}

func (fake *FakeUsbConfigPluginInterface) SetTargetArgsForCall(i int) string {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return fake.setTargetArgsForCall[i].arg1
}

func (fake *FakeUsbConfigPluginInterface) SetTargetReturns(result1 error) {
	fake.SetTargetStub = nil
	fake.setTargetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsbConfigPluginInterface) GetUsbConfigFile() (string, error) {
	fake.getUsbConfigFileMutex.Lock()
	fake.getUsbConfigFileArgsForCall = append(fake.getUsbConfigFileArgsForCall, struct{}{})
	fake.getUsbConfigFileMutex.Unlock()
	if fake.GetUsbConfigFileStub != nil {
		return fake.GetUsbConfigFileStub()
	} else {
		return fake.getUsbConfigFileReturns.result1, fake.getUsbConfigFileReturns.result2
	}
}

func (fake *FakeUsbConfigPluginInterface) GetUsbConfigFileCallCount() int {
	fake.getUsbConfigFileMutex.RLock()
	defer fake.getUsbConfigFileMutex.RUnlock()
	return len(fake.getUsbConfigFileArgsForCall)
}

func (fake *FakeUsbConfigPluginInterface) GetUsbConfigFileReturns(result1 string, result2 error) {
	fake.GetUsbConfigFileStub = nil
	fake.getUsbConfigFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ config.UsbConfigPluginInterface = new(FakeUsbConfigPluginInterface)
