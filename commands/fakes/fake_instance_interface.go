// This file was generated by counterfeiter
package fakes

import (
	"sync"

	swaggerclient "github.com/go-swagger/go-swagger/client"
	"github.com/hpcloud/cf-plugin-usb/commands"
	"github.com/hpcloud/cf-plugin-usb/lib/models"
)

type FakeInstanceInterface struct {
	CreateStub        func(swaggerclient.AuthInfoWriter, []string) (string, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 []string
	}
	createReturns struct {
		result1 string
		result2 error
	}
	DeleteStub        func(swaggerclient.AuthInfoWriter, string) (string, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 string
	}
	deleteReturns struct {
		result1 string
		result2 error
	}
	UpdateStub        func(swaggerclient.AuthInfoWriter, []string) (string, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 []string
	}
	updateReturns struct {
		result1 string
		result2 error
	}
	ListStub        func(swaggerclient.AuthInfoWriter, string) ([]*models.DriverInstance, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 string
	}
	listReturns struct {
		result1 []*models.DriverInstance
		result2 error
	}
	GetDriverInstanceByNameStub        func(swaggerclient.AuthInfoWriter, string) *models.DriverInstance
	getDriverInstanceByNameMutex       sync.RWMutex
	getDriverInstanceByNameArgsForCall []struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 string
	}
	getDriverInstanceByNameReturns struct {
		result1 *models.DriverInstance
	}
}

func (fake *FakeInstanceInterface) Create(arg1 swaggerclient.AuthInfoWriter, arg2 []string) (string, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 []string
	}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeInstanceInterface) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeInstanceInterface) CreateArgsForCall(i int) (swaggerclient.AuthInfoWriter, []string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2
}

func (fake *FakeInstanceInterface) CreateReturns(result1 string, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceInterface) Delete(arg1 swaggerclient.AuthInfoWriter, arg2 string) (string, error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 string
	}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2)
	} else {
		return fake.deleteReturns.result1, fake.deleteReturns.result2
	}
}

func (fake *FakeInstanceInterface) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeInstanceInterface) DeleteArgsForCall(i int) (swaggerclient.AuthInfoWriter, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1, fake.deleteArgsForCall[i].arg2
}

func (fake *FakeInstanceInterface) DeleteReturns(result1 string, result2 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceInterface) Update(arg1 swaggerclient.AuthInfoWriter, arg2 []string) (string, error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 []string
	}{arg1, arg2})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2)
	} else {
		return fake.updateReturns.result1, fake.updateReturns.result2
	}
}

func (fake *FakeInstanceInterface) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeInstanceInterface) UpdateArgsForCall(i int) (swaggerclient.AuthInfoWriter, []string) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1, fake.updateArgsForCall[i].arg2
}

func (fake *FakeInstanceInterface) UpdateReturns(result1 string, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceInterface) List(arg1 swaggerclient.AuthInfoWriter, arg2 string) ([]*models.DriverInstance, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 string
	}{arg1, arg2})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1, arg2)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeInstanceInterface) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeInstanceInterface) ListArgsForCall(i int) (swaggerclient.AuthInfoWriter, string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].arg1, fake.listArgsForCall[i].arg2
}

func (fake *FakeInstanceInterface) ListReturns(result1 []*models.DriverInstance, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*models.DriverInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceInterface) GetDriverInstanceByName(arg1 swaggerclient.AuthInfoWriter, arg2 string) *models.DriverInstance {
	fake.getDriverInstanceByNameMutex.Lock()
	fake.getDriverInstanceByNameArgsForCall = append(fake.getDriverInstanceByNameArgsForCall, struct {
		arg1 swaggerclient.AuthInfoWriter
		arg2 string
	}{arg1, arg2})
	fake.getDriverInstanceByNameMutex.Unlock()
	if fake.GetDriverInstanceByNameStub != nil {
		return fake.GetDriverInstanceByNameStub(arg1, arg2)
	} else {
		return fake.getDriverInstanceByNameReturns.result1
	}
}

func (fake *FakeInstanceInterface) GetDriverInstanceByNameCallCount() int {
	fake.getDriverInstanceByNameMutex.RLock()
	defer fake.getDriverInstanceByNameMutex.RUnlock()
	return len(fake.getDriverInstanceByNameArgsForCall)
}

func (fake *FakeInstanceInterface) GetDriverInstanceByNameArgsForCall(i int) (swaggerclient.AuthInfoWriter, string) {
	fake.getDriverInstanceByNameMutex.RLock()
	defer fake.getDriverInstanceByNameMutex.RUnlock()
	return fake.getDriverInstanceByNameArgsForCall[i].arg1, fake.getDriverInstanceByNameArgsForCall[i].arg2
}

func (fake *FakeInstanceInterface) GetDriverInstanceByNameReturns(result1 *models.DriverInstance) {
	fake.GetDriverInstanceByNameStub = nil
	fake.getDriverInstanceByNameReturns = struct {
		result1 *models.DriverInstance
	}{result1}
}

var _ commands.InstanceInterface = new(FakeInstanceInterface)
