// This file was generated by counterfeiter
package fakes

import (
	. "github.com/cloudfoundry/cli/cf/api"

	"github.com/cloudfoundry/cli/cf/models"

	"sync"
)

type FakeServicePlanVisibilityRepository struct {
	CreateStub        func(string, string) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createReturns struct {
		result1 error
	}
	ListStub        func() ([]models.ServicePlanVisibilityFields, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct{}
	listReturns     struct {
		result1 []models.ServicePlanVisibilityFields
		result2 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	SearchStub        func(map[string]string) ([]models.ServicePlanVisibilityFields, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 map[string]string
	}
	searchReturns struct {
		result1 []models.ServicePlanVisibilityFields
		result2 error
	}
}

func (fake *FakeServicePlanVisibilityRepository) Create(arg1 string, arg2 string) error {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeServicePlanVisibilityRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeServicePlanVisibilityRepository) CreateArgsForCall(i int) (string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2
}

func (fake *FakeServicePlanVisibilityRepository) CreateReturns(result1 error) {
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServicePlanVisibilityRepository) List() ([]models.ServicePlanVisibilityFields, error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct{}{})
	if fake.ListStub != nil {
		return fake.ListStub()
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeServicePlanVisibilityRepository) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeServicePlanVisibilityRepository) ListReturns(result1 []models.ServicePlanVisibilityFields, result2 error) {
	fake.listReturns = struct {
		result1 []models.ServicePlanVisibilityFields
		result2 error
	}{result1, result2}
}

func (fake *FakeServicePlanVisibilityRepository) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeServicePlanVisibilityRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeServicePlanVisibilityRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

func (fake *FakeServicePlanVisibilityRepository) DeleteReturns(result1 error) {
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServicePlanVisibilityRepository) Search(arg1 map[string]string) ([]models.ServicePlanVisibilityFields, error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 map[string]string
	}{arg1})
	if fake.SearchStub != nil {
		return fake.SearchStub(arg1)
	} else {
		return fake.searchReturns.result1, fake.searchReturns.result2
	}
}

func (fake *FakeServicePlanVisibilityRepository) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeServicePlanVisibilityRepository) SearchArgsForCall(i int) map[string]string {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return fake.searchArgsForCall[i].arg1
}

func (fake *FakeServicePlanVisibilityRepository) SearchReturns(result1 []models.ServicePlanVisibilityFields, result2 error) {
	fake.searchReturns = struct {
		result1 []models.ServicePlanVisibilityFields
		result2 error
	}{result1, result2}
}

var _ ServicePlanVisibilityRepository = new(FakeServicePlanVisibilityRepository)
