// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/api/applications"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeApplicationRepository struct {
	CreateStub        func(params models.AppParams) (createdApp models.Application, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params models.AppParams
	}
	createReturns struct {
		result1 models.Application
		result2 error
	}
	GetAppStub        func(appGuid string) (models.Application, error)
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct {
		appGuid string
	}
	getAppReturns struct {
		result1 models.Application
		result2 error
	}
	ReadStub        func(name string) (app models.Application, apiErr error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		name string
	}
	readReturns struct {
		result1 models.Application
		result2 error
	}
	ReadFromSpaceStub        func(name string, spaceGuid string) (app models.Application, apiErr error)
	readFromSpaceMutex       sync.RWMutex
	readFromSpaceArgsForCall []struct {
		name      string
		spaceGuid string
	}
	readFromSpaceReturns struct {
		result1 models.Application
		result2 error
	}
	UpdateStub        func(appGuid string, params models.AppParams) (updatedApp models.Application, apiErr error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		appGuid string
		params  models.AppParams
	}
	updateReturns struct {
		result1 models.Application
		result2 error
	}
	DeleteStub        func(appGuid string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		appGuid string
	}
	deleteReturns struct {
		result1 error
	}
	ReadEnvStub        func(guid string) (*models.Environment, error)
	readEnvMutex       sync.RWMutex
	readEnvArgsForCall []struct {
		guid string
	}
	readEnvReturns struct {
		result1 *models.Environment
		result2 error
	}
	CreateRestageRequestStub        func(guid string) (apiErr error)
	createRestageRequestMutex       sync.RWMutex
	createRestageRequestArgsForCall []struct {
		guid string
	}
	createRestageRequestReturns struct {
		result1 error
	}
}

func (fake *FakeApplicationRepository) Create(params models.AppParams) (createdApp models.Application, apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params models.AppParams
	}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeApplicationRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeApplicationRepository) CreateArgsForCall(i int) models.AppParams {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeApplicationRepository) CreateReturns(result1 models.Application, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationRepository) GetApp(appGuid string) (models.Application, error) {
	fake.getAppMutex.Lock()
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct {
		appGuid string
	}{appGuid})
	fake.getAppMutex.Unlock()
	if fake.GetAppStub != nil {
		return fake.GetAppStub(appGuid)
	} else {
		return fake.getAppReturns.result1, fake.getAppReturns.result2
	}
}

func (fake *FakeApplicationRepository) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeApplicationRepository) GetAppArgsForCall(i int) string {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return fake.getAppArgsForCall[i].appGuid
}

func (fake *FakeApplicationRepository) GetAppReturns(result1 models.Application, result2 error) {
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationRepository) Read(name string) (app models.Application, apiErr error) {
	fake.readMutex.Lock()
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		name string
	}{name})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(name)
	} else {
		return fake.readReturns.result1, fake.readReturns.result2
	}
}

func (fake *FakeApplicationRepository) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeApplicationRepository) ReadArgsForCall(i int) string {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].name
}

func (fake *FakeApplicationRepository) ReadReturns(result1 models.Application, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationRepository) ReadFromSpace(name string, spaceGuid string) (app models.Application, apiErr error) {
	fake.readFromSpaceMutex.Lock()
	fake.readFromSpaceArgsForCall = append(fake.readFromSpaceArgsForCall, struct {
		name      string
		spaceGuid string
	}{name, spaceGuid})
	fake.readFromSpaceMutex.Unlock()
	if fake.ReadFromSpaceStub != nil {
		return fake.ReadFromSpaceStub(name, spaceGuid)
	} else {
		return fake.readFromSpaceReturns.result1, fake.readFromSpaceReturns.result2
	}
}

func (fake *FakeApplicationRepository) ReadFromSpaceCallCount() int {
	fake.readFromSpaceMutex.RLock()
	defer fake.readFromSpaceMutex.RUnlock()
	return len(fake.readFromSpaceArgsForCall)
}

func (fake *FakeApplicationRepository) ReadFromSpaceArgsForCall(i int) (string, string) {
	fake.readFromSpaceMutex.RLock()
	defer fake.readFromSpaceMutex.RUnlock()
	return fake.readFromSpaceArgsForCall[i].name, fake.readFromSpaceArgsForCall[i].spaceGuid
}

func (fake *FakeApplicationRepository) ReadFromSpaceReturns(result1 models.Application, result2 error) {
	fake.ReadFromSpaceStub = nil
	fake.readFromSpaceReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationRepository) Update(appGuid string, params models.AppParams) (updatedApp models.Application, apiErr error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		appGuid string
		params  models.AppParams
	}{appGuid, params})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(appGuid, params)
	} else {
		return fake.updateReturns.result1, fake.updateReturns.result2
	}
}

func (fake *FakeApplicationRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeApplicationRepository) UpdateArgsForCall(i int) (string, models.AppParams) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].appGuid, fake.updateArgsForCall[i].params
}

func (fake *FakeApplicationRepository) UpdateReturns(result1 models.Application, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationRepository) Delete(appGuid string) (apiErr error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		appGuid string
	}{appGuid})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(appGuid)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeApplicationRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeApplicationRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].appGuid
}

func (fake *FakeApplicationRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeApplicationRepository) ReadEnv(guid string) (*models.Environment, error) {
	fake.readEnvMutex.Lock()
	fake.readEnvArgsForCall = append(fake.readEnvArgsForCall, struct {
		guid string
	}{guid})
	fake.readEnvMutex.Unlock()
	if fake.ReadEnvStub != nil {
		return fake.ReadEnvStub(guid)
	} else {
		return fake.readEnvReturns.result1, fake.readEnvReturns.result2
	}
}

func (fake *FakeApplicationRepository) ReadEnvCallCount() int {
	fake.readEnvMutex.RLock()
	defer fake.readEnvMutex.RUnlock()
	return len(fake.readEnvArgsForCall)
}

func (fake *FakeApplicationRepository) ReadEnvArgsForCall(i int) string {
	fake.readEnvMutex.RLock()
	defer fake.readEnvMutex.RUnlock()
	return fake.readEnvArgsForCall[i].guid
}

func (fake *FakeApplicationRepository) ReadEnvReturns(result1 *models.Environment, result2 error) {
	fake.ReadEnvStub = nil
	fake.readEnvReturns = struct {
		result1 *models.Environment
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationRepository) CreateRestageRequest(guid string) (apiErr error) {
	fake.createRestageRequestMutex.Lock()
	fake.createRestageRequestArgsForCall = append(fake.createRestageRequestArgsForCall, struct {
		guid string
	}{guid})
	fake.createRestageRequestMutex.Unlock()
	if fake.CreateRestageRequestStub != nil {
		return fake.CreateRestageRequestStub(guid)
	} else {
		return fake.createRestageRequestReturns.result1
	}
}

func (fake *FakeApplicationRepository) CreateRestageRequestCallCount() int {
	fake.createRestageRequestMutex.RLock()
	defer fake.createRestageRequestMutex.RUnlock()
	return len(fake.createRestageRequestArgsForCall)
}

func (fake *FakeApplicationRepository) CreateRestageRequestArgsForCall(i int) string {
	fake.createRestageRequestMutex.RLock()
	defer fake.createRestageRequestMutex.RUnlock()
	return fake.createRestageRequestArgsForCall[i].guid
}

func (fake *FakeApplicationRepository) CreateRestageRequestReturns(result1 error) {
	fake.CreateRestageRequestStub = nil
	fake.createRestageRequestReturns = struct {
		result1 error
	}{result1}
}

var _ applications.ApplicationRepository = new(FakeApplicationRepository)
