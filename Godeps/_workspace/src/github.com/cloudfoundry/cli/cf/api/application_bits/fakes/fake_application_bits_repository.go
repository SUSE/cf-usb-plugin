// This file was generated by counterfeiter
package fakes

import (
	. "github.com/cloudfoundry/cli/cf/api/application_bits"
	"github.com/cloudfoundry/cli/cf/api/resources"
	"os"
	"sync"
)

type FakeApplicationBitsRepository struct {
	GetApplicationFilesStub        func(appFilesRequest []resources.AppFileResource) ([]resources.AppFileResource, error)
	getApplicationFilesMutex       sync.RWMutex
	getApplicationFilesArgsForCall []struct {
		arg1 []resources.AppFileResource
	}
	getApplicationFilesReturns struct {
		result1 []resources.AppFileResource
		result2 error
	}
	UploadBitsStub        func(appGuid string, zipFile *os.File, presentFiles []resources.AppFileResource) (apiErr error)
	uploadBitsMutex       sync.RWMutex
	uploadBitsArgsForCall []struct {
		arg1 string
		arg2 *os.File
		arg3 []resources.AppFileResource
	}
	uploadBitsReturns struct {
		result1 error
	}
}

func (fake *FakeApplicationBitsRepository) GetApplicationFiles(arg1 []resources.AppFileResource) ([]resources.AppFileResource, error) {
	fake.getApplicationFilesMutex.Lock()
	defer fake.getApplicationFilesMutex.Unlock()
	fake.getApplicationFilesArgsForCall = append(fake.getApplicationFilesArgsForCall, struct {
		arg1 []resources.AppFileResource
	}{arg1})
	if fake.GetApplicationFilesStub != nil {
		return fake.GetApplicationFilesStub(arg1)
	} else {
		return fake.getApplicationFilesReturns.result1, fake.getApplicationFilesReturns.result2
	}
}

func (fake *FakeApplicationBitsRepository) GetApplicationFilesCallCount() int {
	fake.getApplicationFilesMutex.RLock()
	defer fake.getApplicationFilesMutex.RUnlock()
	return len(fake.getApplicationFilesArgsForCall)
}

func (fake *FakeApplicationBitsRepository) GetApplicationFilesArgsForCall(i int) []resources.AppFileResource {
	fake.getApplicationFilesMutex.RLock()
	defer fake.getApplicationFilesMutex.RUnlock()
	return fake.getApplicationFilesArgsForCall[i].arg1
}

func (fake *FakeApplicationBitsRepository) GetApplicationFilesReturns(result1 []resources.AppFileResource, result2 error) {
	fake.getApplicationFilesReturns = struct {
		result1 []resources.AppFileResource
		result2 error
	}{result1, result2}
}

func (fake *FakeApplicationBitsRepository) UploadBits(arg1 string, arg2 *os.File, arg3 []resources.AppFileResource) (apiErr error) {
	fake.uploadBitsMutex.Lock()
	defer fake.uploadBitsMutex.Unlock()
	fake.uploadBitsArgsForCall = append(fake.uploadBitsArgsForCall, struct {
		arg1 string
		arg2 *os.File
		arg3 []resources.AppFileResource
	}{arg1, arg2, arg3})
	if fake.UploadBitsStub != nil {
		return fake.UploadBitsStub(arg1, arg2, arg3)
	} else {
		return fake.uploadBitsReturns.result1
	}
}

func (fake *FakeApplicationBitsRepository) UploadBitsCallCount() int {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return len(fake.uploadBitsArgsForCall)
}

func (fake *FakeApplicationBitsRepository) UploadBitsArgsForCall(i int) (string, *os.File, []resources.AppFileResource) {
	fake.uploadBitsMutex.RLock()
	defer fake.uploadBitsMutex.RUnlock()
	return fake.uploadBitsArgsForCall[i].arg1, fake.uploadBitsArgsForCall[i].arg2, fake.uploadBitsArgsForCall[i].arg3
}

func (fake *FakeApplicationBitsRepository) UploadBitsReturns(result1 error) {
	fake.uploadBitsReturns = struct {
		result1 error
	}{result1}
}

var _ ApplicationBitsRepository = new(FakeApplicationBitsRepository)
